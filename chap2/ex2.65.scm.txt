The solutions transform the tree to a sorted list, perform the
algorithms developed in the text and in exercise 2.62 on the sorted
list, and then transform the sorted list back into a tree.

Each procedure used by union-set or intersection-set (tree->list,
either intersection-set-list or union-set-list, and the conversion
back to a tree via list->tree) is O(n). Each procedure is called once
(in the case of intersection-set-list, union-set-list, and list->tree)
or twice (tree->list). The union-set and intersection-set
implementations, then, are also O(n).

tests:

(define s1 (list->tree '(1 2 3 5 6 8 10 11)))

(define s2 (list->tree '(2 4 6 8 11 13)))

(tree->list (union-set s1 s2))

(tree->list (intersection-set s1 s2))
